{"version":3,"file":"mod.js","sources":["../0af46be4d2b26712ae014f572fe41d","../lib/server.js","../lib/index.js"],"sourcesContent":["export default '/home/runner/work/net-disposable-http-server/net-disposable-http-server/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar path = require( 'path' );\nvar logger = require( 'debug' );\nvar objectKeys = require( '@stdlib/utils-keys' );\nvar createServer = require( '@stdlib/net-http-server' );\nvar readFileSync = require( '@stdlib/fs-read-file' ).sync;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar openURL = require( '@stdlib/utils-open-url' );\nvar noop = require( '@stdlib/utils-noop' );\nvar Buffer = require( '@stdlib/buffer-ctor' );\nvar string2buffer = require( '@stdlib/buffer-from-string' );\nvar nextTick = require( '@stdlib/utils-next-tick' );\nvar validate = require( './validate.js' );\nvar serverOpts = require( './opts.js' );\nvar createStore = require( './connections_store.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'disposable-http-server' );\n\n\n// MAIN //\n\n/**\n* Creates a disposable HTTP server.\n*\n* @param {Options} options - server options\n* @param {(Buffer|string)} [options.html] - HTML content to serve\n* @param {(Buffer|string)} [options.javascript] - JavaScript to serve\n* @param {NonNegativeInteger} [options.port=0] - server port\n* @param {NonNegativeInteger} [options.maxport] - max server port\n* @param {string} [options.hostname] - server hostname\n* @param {string} [options.address=\"0.0.0.0\"] - server address\n* @param {boolean} [options.open=false] - boolean indicating whether to launch a web browser\n* @param {Callback} [clbk] - callback to invoke upon creating a server\n* @throws {TypeError} must provide valid options\n* @throws {Error} error encountered when starting server\n*\n* @example\n* var opts = {\n*     'html': '<h1>Beep</h1>'\n* };\n*\n* httpServer( opts, onReady );\n*\n* function onReady( error, server ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     server.close();\n* }\n*/\nfunction httpServer( options ) {\n\tvar connections;\n\tvar isClosing;\n\tvar server;\n\tvar sopts;\n\tvar fpath;\n\tvar clbk;\n\tvar boot;\n\tvar opts;\n\tvar err;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\tclbk = arguments[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Callback argument must be a function. Value: `' + clbk + '`.' );\n\t\t}\n\t} else {\n\t\tclbk = noop;\n\t}\n\terr = validate( opts, options );\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\t// If provided HTML and/or JavaScript as `strings`, convert to `buffers`...\n\tif ( opts.html && isString( opts.html ) ) {\n\t\topts.html = string2buffer( opts.html );\n\t}\n\tif ( opts.javascript && isString( opts.javascript ) ) {\n\t\topts.javascript = string2buffer( opts.javascript );\n\t}\n\t// Extract server options:\n\tsopts = serverOpts( options );\n\n\tdebug( 'Serving provided content.' );\n\tif ( !opts.html ) {\n\t\tdebug( 'No HTML content provided.' );\n\t\tdebug( 'Loading a boilerplate HTML page...' );\n\t\tfpath = path.resolve( __dirname, '../static/index.html' );\n\t\topts.html = readFileSync( fpath );\n\t}\n\t// Create a function to boot a server...\n\tboot = createServer( sopts, requestListener );\n\n\tdebug( 'Starting server...' );\n\tboot( onServer );\n\n\t// Initialize a connections store:\n\tconnections = createStore();\n\n\t/**\n\t* Callback invoked upon creating a server.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {Server} _server - server instance\n\t* @throws {Error} error encountered when starting server\n\t*/\n\tfunction onServer( error, _server ) {\n\t\tvar addr;\n\t\tif ( error ) {\n\t\t\tthrow error;\n\t\t}\n\t\tdebug( 'Server started.' );\n\t\tserver = _server;\n\t\tserver.on( 'connection', onConnection );\n\t\tserver.once( 'close', onClose );\n\t\tif ( opts.open ) {\n\t\t\taddr = server.address();\n\t\t\topenURL( 'http://'+addr.address+':'+addr.port );\n\t\t}\n\t\tclbk( null, server );\n\t}\n\n\t/**\n\t* Callback invoked upon receiving a socket connection.\n\t*\n\t* @private\n\t* @param {Socket} socket - socket connection\n\t*/\n\tfunction onConnection( socket ) {\n\t\tvar key = socket.remoteAddress + ':' + socket.remotePort;\n\n\t\tdebug( 'Received a socket connection: %s.', key );\n\t\tconnections[ key ] = socket;\n\t\tsocket.on( 'close', onClose );\n\n\t\t/**\n\t\t* Callback invoked once a socket connection closes.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction onClose() {\n\t\t\tdebug( 'Socket connection closed: %s.', key );\n\t\t\tdelete connections[ key ];\n\t\t}\n\t}\n\n\t/**\n\t* Callback invoked upon receiving an HTTP request for provided content.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t* @returns {void}\n\t*/\n\tfunction requestListener( request, response ) {\n\t\tdebug( 'Received a request for %s', request.url );\n\n\t\tif ( isClosing ) {\n\t\t\treturn unavailable( request, response );\n\t\t}\n\t\tif ( request.url === '/bundle.js' ) {\n\t\t\tnextTick( onTick( sendJavaScript ) );\n\t\t\treturn response.once( 'finish', onFinish );\n\t\t}\n\t\tif ( request.url !== '/' && request.url !== '/index.html' ) {\n\t\t\treturn notFound( request, response );\n\t\t}\n\t\tnextTick( onTick( sendHTML ) );\n\t\tif ( !opts.javascript ) {\n\t\t\tresponse.once( 'finish', onFinish );\n\t\t}\n\n\t\t/**\n\t\t* Returns a callback to return a response on the next tick. Note that this is a workaround for a race condition bug in Node v0.10 (see [nodejs/node#1309][1]).\n\t\t*\n\t\t* [1]: https://github.com/nodejs/node/issues/1309\n\t\t*\n\t\t* @private\n\t\t* @param {Function} fcn - response function\n\t\t* @returns {Callback} callback to invoke on next tick\n\t\t*/\n\t\tfunction onTick( fcn ) {\n\t\t\treturn next;\n\n\t\t\t/**\n\t\t\t* Callback to return on a response.\n\t\t\t*\n\t\t\t* @private\n\t\t\t*/\n\t\t\tfunction next() {\n\t\t\t\tfcn( request, response );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Sends a 404 response.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction notFound( request, response ) {\n\t\tdebug( 'Sending 404 response...' );\n\t\tresponse.statusCode = 404;\n\t\tresponse.end();\n\t}\n\n\t/**\n\t* Sends a 503 response.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction unavailable( request, response ) {\n\t\tdebug( 'Sending 503 response...' );\n\t\tresponse.statusCode = 503;\n\t\tresponse.end();\n\t}\n\n\t/**\n\t* Sends HTML content in response to a client request.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction sendHTML( request, response ) {\n\t\tdebug( 'Sending HTML...' );\n\t\tresponse.statusCode = 200;\n\t\tresponse.setHeader( 'Content-Type', 'text/html' );\n\n\t\t// TODO: we have to convert to a `string` because Node v0.10 requires a `string`. Subsequent versions support providing a `Buffer` object. Ideally, we would sniff `Buffer` support and only convert to a `string` if necessary.\n\t\tresponse.setHeader( 'Content-Length', Buffer.byteLength( opts.html.toString() ) );\n\t\tresponse.end( opts.html );\n\t}\n\n\t/**\n\t* Sends JavaScript content in response to a client request.\n\t*\n\t* @private\n\t* @param {IncomingMessage} request - HTTP request object\n\t* @param {ServerResponse} response - HTTP response object\n\t*/\n\tfunction sendJavaScript( request, response ) {\n\t\tdebug( 'Sending JavaScript...' );\n\t\tresponse.statusCode = 200;\n\t\tresponse.setHeader( 'Content-Type', 'text/javascript' );\n\n\t\t// TODO: we have to convert to a `string` because Node v0.10 requires a `string`. Subsequent versions support providing a `Buffer` object. Ideally, we would sniff `Buffer` support and only convert to a `string` if necessary.\n\t\tresponse.setHeader( 'Content-Length', Buffer.byteLength( opts.javascript.toString() ) );\n\t\tresponse.end( opts.javascript );\n\t}\n\n\t/**\n\t* Callback invoked once the server should close.\n\t*\n\t* @private\n\t*/\n\tfunction onFinish() {\n\t\tdebug( 'Finished serving content.' );\n\t\tisClosing = true;\n\n\t\tdebug( 'Closing the server...' );\n\t\tserver.close();\n\n\t\tsetTimeout( destroyConnections, 5000 );\n\t}\n\n\t/**\n\t* Destroys all connections.\n\t*\n\t* @private\n\t*/\n\tfunction destroyConnections() {\n\t\tvar keys;\n\t\tvar i;\n\n\t\tdebug( 'Destroying all connections...' );\n\t\tkeys = objectKeys( connections );\n\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\tdebug( 'Destroying connection %s...', keys[i] );\n\t\t\tconnections[ keys[i] ].destroy();\n\t\t}\n\t}\n\n\t/**\n\t* Callback invoked once a server closes.\n\t*\n\t* @private\n\t*/\n\tfunction onClose() {\n\t\tdebug( 'Server closed.' );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = httpServer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a disposable HTTP server.\n*\n* @module @stdlib/net-disposable-http-server\n*\n* @example\n* var httpServer = require( '@stdlib/net-disposable-http-server' );\n*\n* var opts = {\n*     'html': '<h1>Beep</h1>'\n* };\n*\n* httpServer( opts, onReady );\n*\n* function onReady( error, server ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     server.close();\n* }\n*/\n\n// MODULES //\n\nvar httpServer = require( './server.js' );\n\n\n// EXPORTS //\n\nmodule.exports = httpServer;\n"],"names":["path","require","logger","objectKeys","createServer","readFileSync","sync","isString","isPrimitive","isFunction","openURL","noop","Buffer","string2buffer","nextTick","validate","serverOpts","createStore","debug","module","exports","options","connections","isClosing","server","sopts","fpath","clbk","boot","opts","err","arguments","length","TypeError","onServer","error","_server","addr","on","onConnection","once","onClose","open","address","port","socket","key","remoteAddress","remotePort","requestListener","request","response","url","unavailable","onTick","sendJavaScript","onFinish","notFound","fcn","sendHTML","javascript","statusCode","end","setHeader","byteLength","html","toString","close","setTimeout","destroyConnections","keys","i","destroy","resolve","__dirname","lib"],"mappings":"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"}